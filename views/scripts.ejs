<script>
var addModal = document.getElementById('addModal')
const tableInput = document.getElementById('table_name');
 

tableInput.addEventListener('keypress', function (event) {

  if (event.key === 'Enter') {
    event.preventDefault();
    if (tableInput !== '') {
      addNewColumn();


    }
  }
});

tableInput.addEventListener('blur', function () {
  addNewColumn();
});
function showToast(message) {
  const toastBody = document.querySelector('.toast-body');
  toastBody.textContent = message;

  const toast = new bootstrap.Toast(document.querySelector('.toast'));
  toast.show();
}

function validateForm() {
  const tableName = document.getElementById('table_name').value;
  var existingTables = document.querySelectorAll(".table-name a");

  for (var i = 0; i < existingTables.length; i++) {
    const existingTableName = existingTables[i].textContent.trim().replace(/\s+/g, ' ');
    const inputTableName = tableName.trim().replace(/\s+/g, ' ');

    if (existingTableName === inputTableName) {
      showToast("Table already exists!");
      return false; // Prevent form submission
    }
  }

  const columnInputs = document.querySelectorAll('.column-input');
  if (!columnInputs || columnInputs.length === 0) {
    showToast("Please add at least one column.");
    return false;
  }

  for (let i = 0; i < columnInputs.length; i++) {
    const columnNameInput = columnInputs[i].querySelector('input[name="column_name[]"]');
    if (!columnNameInput || columnNameInput.value === "") {
      showToast("Please enter a column name for all columns.");
      return false;
    }
  }


  showToast("You created the new table " + tableName);
  
  return ;
}


function addNewColumn() {
  const tableName = tableInput.value;
  if (tableName === "") {
    showToast("Please enter the table name first.");
    return;
  }

  const columnsContainer = document.getElementById('columns-container');

  const columnInputs = columnsContainer.querySelectorAll('.column-input');
  const lastColumnInput = columnInputs[columnInputs.length - 1];

  if (lastColumnInput) {
    const columnNameInput = lastColumnInput.querySelector('input[name="column_name[]"]');
    if (columnNameInput.value === "") {
      showToast("Please fill in the previous column name before adding a new column.");
      return;
    }
  }

  const columnInput = document.createElement('div');
  columnInput.classList.add('column-input');
  columnInput.innerHTML = `
  <div class="input-group mb-3">
   
  <input type="text" class="xel form-control border-primary-subtle rounded-1 me-3" name="column_name[]" placeholder="Column Name">
    <select class="column_type form-select border-primary-subtle rounded-1 me-3" name="data_type[]" onchange="showLengthInput(this)">
      <option value="INT" title="Integer">INT</option>
      <option value="VARCHAR" title="String">VARCHAR</option>
      <option value="DATE" title="Date">DATE</option>
    </select>
    <input type="text" name="data_length[]" placeholder="Length" class="form-control border-primary" style="display: none;">
    <button type="button" class="btn btn-outline-danger rounded-1" onclick="removeColumnInput(this)">
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
        <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5Zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5Zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6Z"></path>
        <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1ZM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118ZM2.5 3h11V2h-11v1Z"></path>
      </svg>
       Remove</button>
  </div>
  `;


  columnsContainer.appendChild(columnInput);
  columnInput.querySelector("input.xel").focus();
}

function removeColumnInput(button) {
  const columnInput = button.parentNode;
  columnInput.parentNode.removeChild(columnInput);
}

function showLengthInput(select) {
  const input = select.nextElementSibling;
  if (select.value === "INT" || select.value === "VARCHAR") {
    input.style.display = "inline-block";
  } else {
    input.style.display = "none";
  }
}
document.addEventListener('DOMContentLoaded', () => {
  // Get the export link element
  const exportLink = document.getElementById('export-link');

  // Add click event listener to the export link
  exportLink.addEventListener('click', () => {
    // Perform an AJAX request to trigger the export endpoint
    fetch('/export')
      .then((response) => response.blob())
      .then((blob) => {
        // Create a temporary link element to download the file
        const link = document.createElement('a');
        link.href = window.URL.createObjectURL(blob);
        link.download = 'endpoints.json';
        link.click();
      })
      .catch((error) => {
        console.error('Error exporting collection:', error);
      });
  });
});
</script>